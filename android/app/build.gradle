apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'

def keyStorePropertiesFile = rootProject.file("keystore.properties")
def keyStoreProperties = new Properties()
keyStoreProperties.load(new FileInputStream(keyStorePropertiesFile))

ext.versionMajor = System.getenv("APP_VERSION_MAJOR") ?: 4
ext.versionMinor = System.getenv("APP_VERSION_MINOR") ?: 0
ext.versionPatch = System.getenv("APP_VERSION_PATCH") ?: 2
ext.versionClassifier = null
ext.isSnapShot = false
ext.minSdkVersion = 30
ext.circleCiBuildNumber = System.getenv("CIRCLE_BUILD_NUM") ?: "0"

private Integer generateVersionCode() {
    int majorVersion = ext.versionMajor.toInteger()
    int minorVersion = ext.versionMinor.toInteger()
    int patchVersion = ext.versionPatch.toInteger()
    int circleCiBuildNum = ext.circleCiBuildNumber.toInteger()

    int versionCode = ext.minSdkVersion * 10000000 +
                      majorVersion * 10000 +
                      minorVersion * 100 +
                      patchVersion +
                      circleCiBuildNum

    return versionCode
}

private String generateVersionName() {
    String versionName = "${ext.versionMajor}.${ext.versionMinor}.${ext.versionPatch}"

    if (ext.versionClassifier == null) {
        if (ext.isSnapShot) {
            ext.versionClassifier = "SNAPSHOT"
        }
    }

    if (ext.versionClassifier != null) {
        versionName += "-" + ext.versionClassifier
    }

    return versionName
}

android {
    namespace "org.wnyc.android"
    compileSdk rootProject.ext.compileSdkVersion
    signingConfigs {
        release {
            keyAlias keyStoreProperties['releaseKeyAlias']
            keyPassword keyStoreProperties['releaseKeyPassword']
            storeFile file(keyStoreProperties['releaseKeyStore'])
            storePassword keyStoreProperties['releaseStorePassword']
        }
    }
    defaultConfig {
        applicationId "org.wnyc.android"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode generateVersionCode()
        versionName generateVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
        dirs '../../node_modules/@capacitor/background-runner/android/src/main/libs', 'libs'
    }
}

dependencies {
    implementation platform("com.google.firebase:firebase-bom:33.1.2")
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
